# Lambda #

Serverless compute service that runs your code in response to events used in data processing, API backends and microservices\
**Benefits**: No server management, automatic scaling and pay-per-use pricing;

## Basics ##
**Function code**\
**Handler**: The entry point of your Lambda function;\
**Execution role**: The IAM role that defines the permissions for your function;\

## Invocation Types ##
- **Asynchronous Invocation:** fire and forget, functions are invoked in response to events, without waiting for the function to complete;
  - **Error handling**: Configured dead-letter queues and retries for failed invocations;
  - **Use cases**: Background tasks, data processing, event-driven workflows;
- **Synchronous Invocation**: functions are invoked in response to events and the caller waits for the function to completed;
  - **Error handling**:In the function code
  - **Use cases**: API backends, data validation, real time processing;
- **Poll-based Invocation**: Lambda functions are invoked by AWS services that poll data source, such as Amazon Kinesis or Amazon SQS;
  - **Scaling**: Scales the number of concurrent function invocations based on the volume of events in the data source;
  - **Use cases**: Stream processing, real-time analytics, message processing;
  
## Security ##
**Execution Role**: IAM with least privileges;\
**Network Security**: Use Amazon VPC subnet to control network acess and isolate your function;\
**Resource policy**: Control permissions for invoking Lambda functions;\


## Scaling ##
**Concurrent Executions**: Scale automatically based on the number of incoming events;\
**Throttling**: Control the scaling behaviour by setting the reserved and maximum concurrency limits;\
**Provisioned Concurrency**: Improve function performance by pre-warming a specific number of function instances; 

## Monitoring ## 
- **CloudWatch**;
- **X Ray**;

## Highlights ##
**Automatic**: 
- scaling;
- code monitoring;
- logging: standard log outputs are logged on CloudWatch;

**Can be based on:**
- Events;
- Amazon API Gateway (HTTP call);
- API Calls
- Alexa
 
**Lambda functions are launched into a container**:
- First execution latency (10ms vs 20ms example);
- Container Freeze/Thaw on subsequent executions;
- No reuse guarantee
- Containers run on Amazon Linux
  - Provide 500MB of additional disk space
  - /tmp directory
  - Transient Cache
- User specified max memory and execution time;
- Intra-region concurrent execution limit: 1000
  - Can request increase

## Best practises ##
**Idempotency**: handle duplicate events and ensure consistent processing;\
**Error handling**: implement proper error handling in your function code and configure retries and dead-letter queues;
**Performance Optimization**: Minimize function startup time, optimize memory setting and reduce package size;

## Event-driven Architectures ##
Responds to events generated by system or users;
**Benefits**: Improve scalability, reduced coupling between components and real-time responsiveness;
**Key Components**: 
- Event producers;
- Event consumers;
- Event routers;

**Event Source**: AWS services or custom applications that trigger Lambda functions;
**Event Types**
- Async: trigger Lambda function and dont expected a response;
- Sync: expect data to be returned;
- Poll-based: integrations with AWS Stream and Queue. These services don't invoke Lambda function directly, Lambda will poll from the AWS SQS or Kinesis Streams, retrieve records and invoke functions;
 