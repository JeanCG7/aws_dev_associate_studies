# Lambda #

Serverless compute service that runs your code in response to events used in data processing, API backends and microservices\
**Benefits**: No server management, automatic scaling and pay-per-use pricing;

## Basics ##
**Function code**\
**Handler**: The entry point of your Lambda function;\
**Execution role**: The IAM role that defines the permissions for your function;\


## Highlights ##
**Automatic**: 
- scaling;
- code monitoring;
- logging: standard log outputs are logged on CloudWatch;

**Can be based on:**
- Events;
- Amazon API Gateway (HTTP call);
- API Calls
- Alexa
 
**Lambda functions are launched into a container**:
- First execution latency (10ms vs 20ms example);
- Container Freeze/Thaw on subsequent executions;
- No reuse guarantee
- Containers run on Amazon Linux
  - Provide 500MB of additional disk space
  - /tmp directory
  - Transient Cache
- User specified max memory and execution time;
- Intra-region concurrent execution limit: 1000
  - Can request increase

## Event-driven Architectures ##
Responds to events generated by system or users;
**Benefits**: Improve scalability, reduced coupling between components and real-time responsiveness;
**Key Components**: 
- Event producers;
- Event consumers;
- Event routers;

**Event Source**: AWS services or custom applications that trigger Lambda functions;
**Event Types**
- Async: trigger Lambda function and dont expected a response;
- Sync: expect data to be returned;
- Poll-based: integrations with AWS Stream and Queue. These services don't invoke Lambda function directly, Lambda will poll from the AWS SQS or Kinesis Streams, retrieve records and invoke functions;
 